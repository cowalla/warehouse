"""
Django settings for warehouse project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

class ConfigError(BaseException):
    pass

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

if SECRET_KEY is None:
    raise ConfigError('Security key not configured!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'warehouse',
    'warehouse.markets',
    'djcelery',
    'kombu.transport.django',
    'dbbackup',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'warehouse.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'warehouse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASE_NAME = os.environ.get('DATABASE_NAME')
DATABASE_USER = os.environ.get('DATABASE_USER')
DATABASE_HOST = os.environ.get('DATABASE_HOST')
DATABASE_PORT = os.environ.get('DATABASE_PORT')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT,
    }
}

# Backup

backup_dir = os.environ.get('DATABASE_BACKUP_DIR', os.path.join(os.getcwd(), 'backups'))

if not os.path.exists(backup_dir):
    os.makedirs(backup_dir)

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': backup_dir}

DBBACKUP_CONNECTORS = {
    'default': {
        'USER': DATABASE_USER,
        'PASSWORD': '',
        'HOST': DATABASE_HOST
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


# Crypto mediator client

from crypto_mediator import CryptoMediator

# present in secret.sh at project level
secret_keys = [
    "BITTREX_API_KEY",
    "BITTREX_API_SECRET",
    "COINBASE_API_SECRET",
    "COINBASE_API_KEY",
    "GATECOIN_API_KEY",
    "GATECOIN_API_SECRET",
    "LIQUI_API_SECRET",
    "LIQUI_API_KEY",
    "GDAX_API_KEY",
    "GDAX_API_SECRET",
    "GDAX_PASSPHRASE",
    "POLONIEX_API_KEY",
    "POLONIEX_API_SECRET",
]
skd = {
    # secret key dict
    k: os.environ.get(k)
    for k in secret_keys
    if os.environ.get(k)
}

exchange_kwargs = {
    'liqui': {'key': skd.get('LIQUI_API_KEY'), 'secret': skd.get('LIQUI_API_SECRET')},
    'poloniex': {'key': skd.get('POLONIEX_API_KEY'), 'secret': ['POLONIEX_API_SECRET']},
    'bittrex': {'api_key': skd.get('BITTREX_API_KEY'), 'api_secret': skd.get('BITTREX_API_SECRET')},
    'coinbase': {'api_key': skd.get('COINBASE_API_KEY'), 'api_secret': skd.get('COINBASE_API_SECRET')},
    'gdax': {'key': skd.get('GDAX_API_KEY'), 'b64secret': skd.get('GDAX_API_SECRET'), 'passphrase': skd.get('GDAX_PASSPHRASE')},
    'gatecoin': {'key': skd.get('GATECOIN_API_KEY'), 'secret': skd.get('GATECOIN_API_SECRET')},
}

requires_kwargs = {'gdax', 'coinbase'}
original_kwargs = exchange_kwargs.copy()

for exchange in exchange_kwargs.keys():
    if not all(exchange_kwargs[exchange].values()):
        exchange_kwargs.pop(exchange)

METACLIENT = CryptoMediator(**exchange_kwargs)

# remove secrets
del skd
del exchange_kwargs

# Celery

import djcelery
djcelery.setup_loader()
BROKER_URL = 'django://'

CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
